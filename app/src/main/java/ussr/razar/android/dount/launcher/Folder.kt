/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ussr.razar.android.dount.launcher

import android.content.*
import android.graphics.*
import android.util.AttributeSet
import android.view.*
import android.view.View.OnLongClickListener
import android.widget.*
import android.widget.AdapterView.OnItemClickListener
import android.widget.AdapterView.OnItemLongClickListener

/**
 * Represents a set of icons chosen by the user or generated by the system.
 */
open class Folder(context: Context?, attrs: AttributeSet?) : LinearLayout(context, attrs), DragSource, OnItemLongClickListener,
    OnItemClickListener, View.OnClickListener, OnLongClickListener {
    protected var mContent: AbsListView? = null
    private var mDragger: DragController? = null
    protected var mLauncher: Launcher? = null
    private var mCloseButton: Button? = null

    /**
     * @return the FolderInfo object associated with this folder
     */
    var info: FolderInfo? = null
        protected set

    /**
     * Which item is being dragged
     */
    protected var mDragItem: ApplicationInfo? = null
    override fun onFinishInflate() {
        super.onFinishInflate()
        mContent = findViewById<View>(R.id.folder_content) as AbsListView
        mContent!!.onItemClickListener = this
        mContent!!.onItemLongClickListener = this
        mCloseButton = findViewById<View>(R.id.folder_close) as Button
        mCloseButton!!.setOnClickListener(this)
        mCloseButton!!.setOnLongClickListener(this)
    }

    override fun onItemClick(parent: AdapterView<*>, v: View, position: Int, id: Long) {
        val app = parent.getItemAtPosition(position) as ApplicationInfo
        // set bound
        if (v != null) {
            val targetRect = Rect()
            v.getGlobalVisibleRect(targetRect)
            app.intent!!.sourceBounds = targetRect
        }
        mLauncher!!.startActivitySafely(app.intent)
    }

    override fun onClick(v: View) {
        mLauncher!!.closeFolder(this)
    }

    override fun onLongClick(v: View): Boolean {
        mLauncher!!.closeFolder(this)
        mLauncher!!.showRenameDialog(info)
        return true
    }

    override fun onItemLongClick(parent: AdapterView<*>, view: View, position: Int, id: Long): Boolean {
        if (!view.isInTouchMode) {
            return false
        }
        val app = parent.getItemAtPosition(position) as ApplicationInfo
        mDragger!!.startDrag(view, this, app, DragController.DRAG_ACTION_COPY)
        mLauncher!!.closeFolder(this)
        mDragItem = app
        return true
    }

    fun setDragger(dragger: DragController?) {
        mDragger = dragger
    }

    override fun onDropCompleted(target: View, success: Boolean) {}

    /**
     * Sets the adapter used to populate the content area. The adapter must only
     * contains ApplicationInfo items.
     *
     * @param adapter The list of applications to display in the folder.
     */
    fun setContentAdapter(adapter: BaseAdapter?) {
        mContent!!.adapter = adapter
    }

    fun notifyDataSetChanged() {
        (mContent!!.adapter as BaseAdapter).notifyDataSetChanged()
    }

    fun setLauncher(launcher: Launcher?) {
        mLauncher = launcher
    }

    // When the folder opens, we need to refresh the GridView's selection by
    // forcing a layout
    open fun onOpen() {
        mContent!!.requestLayout()
    }

    open fun onClose() {
        val workspace = mLauncher?.workspace
        workspace!!.getChildAt(workspace.currentScreen).requestFocus()
    }

    open fun bind(info: FolderInfo) {
        this.info = info
        mCloseButton!!.text = info.title
    }


    init {
        isAlwaysDrawnWithCacheEnabled = false
    }
}